1、懒汉式：首先将该类的对象作为静态变量，且设为private，构造函数也为private，设计一个函数判断其是否是null，如果不是则构建一个新的对象。
注意：该方法必须是加上synchronized同步锁，这样才线程安全。
2、饿汉式：将该类对象作为全局静态变量，在一开始就直接赋值，并将属性、构造方法全部设置为private，使其无法从别处获得对象。即在JVM的classloader
工作完毕后，该类对象就已经被创建完毕了。
3、静态内部类：静态内部类在JVM中是唯一存在的，因此将要生成的单例的类作为静态属性赋值给内部类的参数中，定义一个方法获得该内部类的对象.
4、双重校验锁：一般在多线程的情况下使用，整体思想跟懒汉式基本相似，但是懒汉式在多线程的情况下每次使用该对象都需要判断是否是null，此时线程阻塞，
性能下降，而双重锁模式先判断是否是null，只在第一次创建对象是阻塞，其余情况下直接使用即可。volatile关键字是为了防止JVM指令集重排，代码中的两个if也是在多线程
情况下生效，为了防止多个线程在第一个if语句后同时执行。